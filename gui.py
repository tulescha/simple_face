import tkinter as tk
from tkinter import messagebox, simpledialog
from PIL import Image, ImageTk
import cv2
import threading
from face_recognition import FaceRecognitionSystem


class FaceRecognitionApp:
    def __init__(self, root):
        self.root = root
        self.root.title("Face Recognition System")
        self.root.geometry("800x600")
        self.system = FaceRecognitionSystem(threshold=0.65)

        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        self.label = tk.Label(root, text="–°–∏—Å—Ç–µ–º–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è –ª–∏—Ü", font=("Arial", 16))
        self.label.pack(pady=10)

        # –ü–æ–ª–µ –¥–ª—è –∏–º–µ–Ω–∏
        self.name_label = tk.Label(root, text="–í–≤–µ–¥–∏—Ç–µ –∏–º—è:")
        self.name_label.pack()
        self.name_entry = tk.Entry(root)
        self.name_entry.pack(pady=5)

        # –ö–Ω–æ–ø–∫–∏
        self.register_btn = tk.Button(root, text="–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è",
                                      command=self.register_face,
                                      width=20, height=2, bg="lightblue")
        self.register_btn.pack(pady=10)

        self.recognize_btn = tk.Button(root, text="–ó–∞–ø—É—Å–∫ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è",
                                       command=self.start_recognition,
                                       width=20, height=2, bg="lightgreen")
        self.recognize_btn.pack(pady=10)

        self.stop_btn = tk.Button(root, text="–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ",
                                  command=self.stop_recognition,
                                  width=20, height=2, bg="orange")
        self.stop_btn.pack(pady=10)

        self.show_db_btn = tk.Button(root, text="–ü—Ä–æ—Å–º–æ—Ç—Ä –±–∞–∑—ã",
                                     command=self.show_database,
                                     width=20, height=2, bg="khaki")
        self.show_db_btn.pack(pady=10)

        self.set_thr_btn = tk.Button(root, text="–ò–∑–º–µ–Ω–∏—Ç—å –ø–æ—Ä–æ–≥–∏",
                                     command=self.set_thresholds,
                                     width=20, height=2, bg="lightyellow")
        self.set_thr_btn.pack(pady=10)

        self.quit_btn = tk.Button(root, text="–í—ã—Ö–æ–¥",
                                  command=root.quit,
                                  width=20, height=2, bg="lightcoral")
        self.quit_btn.pack(pady=10)

        # –í–∏–¥–µ–æ –æ–∫–Ω–æ
        self.video_label = tk.Label(root)
        self.video_label.pack(pady=10)

        # –õ–æ–≥
        self.log = tk.Text(root, height=6, state="disabled")
        self.log.pack(fill="x", padx=10, pady=5)

        self.cap = None
        self.running = False

    def log_message(self, msg):
        self.log.config(state="normal")
        self.log.insert("end", msg + "\n")
        self.log.see("end")
        self.log.config(state="disabled")

    def register_face(self):
        name = self.name_entry.get().strip()
        if not name:
            messagebox.showwarning("–û—à–∏–±–∫–∞", "–í–≤–µ–¥–∏—Ç–µ –∏–º—è –ø–µ—Ä–µ–¥ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–µ–π!")
            return
        self.log_message(f"‚úÖ (–¥–µ–º–æ) –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {name} –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω.")
        # —Ç—É—Ç –º–æ–∂–Ω–æ —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –∑–∞—Ö–≤–∞—Ç –∫–∞–¥—Ä–æ–≤ —Å –∫–∞–º–µ—Ä—ã –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –±–∞–∑—É

    def start_recognition(self):
        if self.running:
            return
        self.running = True
        self.cap = cv2.VideoCapture(0)
        self.log_message("üîç –ó–∞–ø—É—Å–∫ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è...")
        threading.Thread(target=self.update_frame, daemon=True).start()

    def update_frame(self):
        while self.running:
            ret, frame = self.cap.read()
            if not ret:
                break
            frame, name = self.system.process_frame(frame)
            rgb = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)
            img = Image.fromarray(rgb)
            imgtk = ImageTk.PhotoImage(image=img)
            self.video_label.imgtk = imgtk
            self.video_label.config(image=imgtk)
            if name:
                self.log_message(f"–û–±–Ω–∞—Ä—É–∂–µ–Ω: {name}")
            self.root.update_idletasks()
        self.cap.release()

    def stop_recognition(self):
        if self.running:
            self.running = False
            self.log_message("üõë –†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")

        # –æ—á–∏—Å—Ç–∫–∞ –æ–∫–Ω–∞ –≤–∏–¥–µ–æ
        self.video_label.config(image="", text="–ö–∞–º–µ—Ä–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞", font=("Arial", 12), fg="gray")
        self.video_label.imgtk = None

    def show_database(self):
        if self.system.db.has_faces():
            users = "\n".join(self.system.db.all_faces().keys())
            self.log_message("üë• –í –±–∞–∑–µ:\n" + users)
        else:
            self.log_message("‚ùå –ë–∞–∑–∞ –ø—É—Å—Ç–∞")

    def set_thresholds(self):
        try:
            low = float(simpledialog.askstring("–ü–æ—Ä–æ–≥", "–í–≤–µ–¥–∏—Ç–µ –Ω–∏–∂–Ω–∏–π –ø–æ—Ä–æ–≥ (–Ω–∞–ø—Ä–∏–º–µ—Ä 0.75):"))
            high = float(simpledialog.askstring("–ü–æ—Ä–æ–≥", "–í–≤–µ–¥–∏—Ç–µ –≤–µ—Ä—Ö–Ω–∏–π –ø–æ—Ä–æ–≥ (–Ω–∞–ø—Ä–∏–º–µ—Ä 0.85):"))
            self.system.low_thr = low
            self.system.high_thr = high
            self.log_message(f"‚úÖ –ü–æ—Ä–æ–≥–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã: —Å–æ–º–Ω–∏—Ç–µ–ª—å–Ω–æ–µ ‚â• {low}, —É–≤–µ—Ä–µ–Ω–Ω–æ–µ ‚â• {high}")
        except Exception:
            messagebox.showerror("–û—à–∏–±–∫–∞", "–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ —á–∏—Å–ª–∞!")
